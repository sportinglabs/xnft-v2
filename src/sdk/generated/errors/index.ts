/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidUserOriginalMintTokenAccount: 'Invalid user original mint token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUserOriginalMintTokenAccountError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidUserOriginalMintTokenAccount'
  constructor() {
    super('Invalid user original mint token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUserOriginalMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1770,
  () => new InvalidUserOriginalMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidUserOriginalMintTokenAccount',
  () => new InvalidUserOriginalMintTokenAccountError()
)

/**
 * InvalidStakeEntryOriginalMintTokenAccount: 'Invalid stake entry original mint token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryOriginalMintTokenAccountError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidStakeEntryOriginalMintTokenAccount'
  constructor() {
    super('Invalid stake entry original mint token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InvalidStakeEntryOriginalMintTokenAccountError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1771,
  () => new InvalidStakeEntryOriginalMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidStakeEntryOriginalMintTokenAccount',
  () => new InvalidStakeEntryOriginalMintTokenAccountError()
)

/**
 * InvalidStakeEntryMintTokenAccount: 'Invalid stake entry token manager mint token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryMintTokenAccountError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidStakeEntryMintTokenAccount'
  constructor() {
    super('Invalid stake entry token manager mint token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeEntryMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new InvalidStakeEntryMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidStakeEntryMintTokenAccount',
  () => new InvalidStakeEntryMintTokenAccountError()
)

/**
 * InvalidUnstakeUser: 'Invalid unstake user only last staker can unstake'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUnstakeUserError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidUnstakeUser'
  constructor() {
    super('Invalid unstake user only last staker can unstake')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUnstakeUserError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidUnstakeUserError())
createErrorFromNameLookup.set(
  'InvalidUnstakeUser',
  () => new InvalidUnstakeUserError()
)

/**
 * InvalidStakePool: 'Invalid stake pool'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakePoolError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidStakePool'
  constructor() {
    super('Invalid stake pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakePoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidStakePoolError())
createErrorFromNameLookup.set(
  'InvalidStakePool',
  () => new InvalidStakePoolError()
)

/**
 * MintNotAllowedInPool: 'Mint not allowed in this pool'
 *
 * @category Errors
 * @category generated
 */
export class MintNotAllowedInPoolError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'MintNotAllowedInPool'
  constructor() {
    super('Mint not allowed in this pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintNotAllowedInPoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new MintNotAllowedInPoolError())
createErrorFromNameLookup.set(
  'MintNotAllowedInPool',
  () => new MintNotAllowedInPoolError()
)

/**
 * InvalidPoolAuthority: 'Invalid stake pool authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPoolAuthorityError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidPoolAuthority'
  constructor() {
    super('Invalid stake pool authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPoolAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidPoolAuthorityError())
createErrorFromNameLookup.set(
  'InvalidPoolAuthority',
  () => new InvalidPoolAuthorityError()
)

/**
 * InvalidStakeType: 'Invalid stake type'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeTypeError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidStakeType'
  constructor() {
    super('Invalid stake type')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeTypeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidStakeTypeError())
createErrorFromNameLookup.set(
  'InvalidStakeType',
  () => new InvalidStakeTypeError()
)

/**
 * InvalidLastStaker: 'Invalid last staker'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLastStakerError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidLastStaker'
  constructor() {
    super('Invalid last staker')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLastStakerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidLastStakerError())
createErrorFromNameLookup.set(
  'InvalidLastStaker',
  () => new InvalidLastStakerError()
)

/**
 * InvalidReceiptMint: 'Invalid receipt mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptMintError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidReceiptMint'
  constructor() {
    super('Invalid receipt mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidReceiptMintError())
createErrorFromNameLookup.set(
  'InvalidReceiptMint',
  () => new InvalidReceiptMintError()
)

/**
 * InvalidAuthority: 'Invalid authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError()
)

/**
 * CannotCloseStakedEntry: 'Cannot close staked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotCloseStakedEntryError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'CannotCloseStakedEntry'
  constructor() {
    super('Cannot close staked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotCloseStakedEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new CannotCloseStakedEntryError())
createErrorFromNameLookup.set(
  'CannotCloseStakedEntry',
  () => new CannotCloseStakedEntryError()
)

/**
 * CannotClosePoolWithStakedEntries: 'Cannot close staked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotClosePoolWithStakedEntriesError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'CannotClosePoolWithStakedEntries'
  constructor() {
    super('Cannot close staked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotClosePoolWithStakedEntriesError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177c,
  () => new CannotClosePoolWithStakedEntriesError()
)
createErrorFromNameLookup.set(
  'CannotClosePoolWithStakedEntries',
  () => new CannotClosePoolWithStakedEntriesError()
)

/**
 * InvalidMintMetadata: 'Invalid mint metadata'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintMetadataError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'InvalidMintMetadata'
  constructor() {
    super('Invalid mint metadata')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new InvalidMintMetadataError())
createErrorFromNameLookup.set(
  'InvalidMintMetadata',
  () => new InvalidMintMetadataError()
)

/**
 * StakingPhaseHasEnded: 'Staking Phase has ended'
 *
 * @category Errors
 * @category generated
 */
export class StakingPhaseHasEndedError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'StakingPhaseHasEnded'
  constructor() {
    super('Staking Phase has ended')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakingPhaseHasEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new StakingPhaseHasEndedError())
createErrorFromNameLookup.set(
  'StakingPhaseHasEnded',
  () => new StakingPhaseHasEndedError()
)

/**
 * RaceIsOngoing: 'Race is ongoing'
 *
 * @category Errors
 * @category generated
 */
export class RaceIsOngoingError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'RaceIsOngoing'
  constructor() {
    super('Race is ongoing')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RaceIsOngoingError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new RaceIsOngoingError())
createErrorFromNameLookup.set('RaceIsOngoing', () => new RaceIsOngoingError())

/**
 * InvalidMintMetadataOwner: 'Mint metadata is owned by the incorrect program'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintMetadataOwnerError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'InvalidMintMetadataOwner'
  constructor() {
    super('Mint metadata is owned by the incorrect program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintMetadataOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new InvalidMintMetadataOwnerError())
createErrorFromNameLookup.set(
  'InvalidMintMetadataOwner',
  () => new InvalidMintMetadataOwnerError()
)

/**
 * InvalidStakeEntry: 'Invalid stake entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'InvalidStakeEntry'
  constructor() {
    super('Invalid stake entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new InvalidStakeEntryError())
createErrorFromNameLookup.set(
  'InvalidStakeEntry',
  () => new InvalidStakeEntryError()
)

/**
 * InvalidVrfAuthorityError: 'Invalid Vrf Authority Error'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVrfAuthorityErrorError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'InvalidVrfAuthorityError'
  constructor() {
    super('Invalid Vrf Authority Error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVrfAuthorityErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new InvalidVrfAuthorityErrorError())
createErrorFromNameLookup.set(
  'InvalidVrfAuthorityError',
  () => new InvalidVrfAuthorityErrorError()
)

/**
 * InvalidVrfAccount: 'Invalid Vrf Account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVrfAccountError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'InvalidVrfAccount'
  constructor() {
    super('Invalid Vrf Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVrfAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new InvalidVrfAccountError())
createErrorFromNameLookup.set(
  'InvalidVrfAccount',
  () => new InvalidVrfAccountError()
)

/**
 * NoResult: 'No Result'
 *
 * @category Errors
 * @category generated
 */
export class NoResultError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'NoResult'
  constructor() {
    super('No Result')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoResultError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new NoResultError())
createErrorFromNameLookup.set('NoResult', () => new NoResultError())

/**
 * InvalidRewardMint: 'Invalid Reward Mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardMintError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'InvalidRewardMint'
  constructor() {
    super('Invalid Reward Mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new InvalidRewardMintError())
createErrorFromNameLookup.set(
  'InvalidRewardMint',
  () => new InvalidRewardMintError()
)

/**
 * InvalidUserRewardMintTokenAccount: 'Invalid User Reward Mint Token Account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUserRewardMintTokenAccountError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'InvalidUserRewardMintTokenAccount'
  constructor() {
    super('Invalid User Reward Mint Token Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUserRewardMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1786,
  () => new InvalidUserRewardMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidUserRewardMintTokenAccount',
  () => new InvalidUserRewardMintTokenAccountError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
